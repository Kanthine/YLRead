//
//  HTTPRequestSerializer.m
//  YLRead
//
//  Created by ËãèÊ≤´Á¶ª on 2020/7/14.
//  Copyright ¬© 2020 ËãèÊ≤´Á¶ª. All rights reserved.
//

#import "HTTPRequestSerializer.h"


NSString * YLReadPercentEscapedStringFromString(NSString *string) {
    static NSString * const kAFCharactersGeneralDelimitersToEncode = @":#[]@"; // does not include "?" or "/" due to RFC 3986 - Section 3.4
    static NSString * const kAFCharactersSubDelimitersToEncode = @"!$&'()*+,;=";

    NSMutableCharacterSet * allowedCharacterSet = [[NSCharacterSet URLQueryAllowedCharacterSet] mutableCopy];
    [allowedCharacterSet removeCharactersInString:[kAFCharactersGeneralDelimitersToEncode stringByAppendingString:kAFCharactersSubDelimitersToEncode]];

    // FIXME: https://github.com/YLReadNetworking/YLReadNetworking/pull/3028
    // return [string stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];

    static NSUInteger const batchSize = 50;

    NSUInteger index = 0;
    NSMutableString *escaped = @"".mutableCopy;

    while (index < string.length) {
        NSUInteger length = MIN(string.length - index, batchSize);
        NSRange range = NSMakeRange(index, length);

        // To avoid breaking up character sequences such as üë¥üèªüëÆüèΩ
        range = [string rangeOfComposedCharacterSequencesForRange:range];

        NSString *substring = [string substringWithRange:range];
        NSString *encoded = [substring stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];
        [escaped appendString:encoded];

        index += range.length;
    }

    return escaped;
}


///ÂÖ®Â±ÄÊñπÊ≥ïÊåáÂÆö‰∫ÜrequestËØ∑Ê±ÇÂ∫èÂàóÂåñË¶ÅËßÇÂØüÁöÑÂ±ûÊÄßÂàóË°®„ÄÅÊòØ‰∏Ä‰∏™Êï∞ÁªÑÔºåÈáåÈù¢ÊúâÂØπËúÇÁ™ùÊï∞ÊçÆ„ÄÅÁºìÂ≠òÁ≠ñÁï•„ÄÅcookie„ÄÅÁÆ°ÈÅì„ÄÅÁΩëÁªúÁä∂ÊÄÅ„ÄÅË∂ÖÊó∂ËøôÂá†‰∏™ÂÖÉÁ¥†„ÄÇ
static NSArray * YLReadHTTPRequestSerializerObservedKeyPaths() {
    static NSArray *_AFHTTPRequestSerializerObservedKeyPaths = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _AFHTTPRequestSerializerObservedKeyPaths = @[NSStringFromSelector(@selector(allowsCellularAccess)), NSStringFromSelector(@selector(cachePolicy)), NSStringFromSelector(@selector(HTTPShouldHandleCookies)), NSStringFromSelector(@selector(HTTPShouldUsePipelining)), NSStringFromSelector(@selector(networkServiceType)), NSStringFromSelector(@selector(timeoutInterval))];
    });
    //Â∞±ÊòØ‰∏Ä‰∏™Êï∞ÁªÑÈáåË£Ö‰∫ÜÂæàÂ§öÊñπÊ≥ïÁöÑÂêçÂ≠ó,
    return _AFHTTPRequestSerializerObservedKeyPaths;
}



@interface YLReadQueryStringPair : NSObject
@property (readwrite, nonatomic, strong) id field;
@property (readwrite, nonatomic, strong) id value;

- (instancetype)initWithField:(id)field value:(id)value;

- (NSString *)URLEncodedStringValue;
@end

@implementation YLReadQueryStringPair

- (instancetype)initWithField:(id)field value:(id)value {
    self = [super init];
    if (!self) {
        return nil;
    }

    self.field = field;
    self.value = value;

    return self;
}

- (NSString *)URLEncodedStringValue {
    if (!self.value || [self.value isEqual:[NSNull null]]) {
        return YLReadPercentEscapedStringFromString([self.field description]);
    } else {
        return [NSString stringWithFormat:@"%@=%@", YLReadPercentEscapedStringFromString([self.field description]), YLReadPercentEscapedStringFromString([self.value description])];
    }
}

@end



NSArray * YLReadQueryStringPairsFromKeyAndValue(NSString *key, id value) {
    NSMutableArray *mutableQueryStringComponents = [NSMutableArray array];

    NSSortDescriptor *sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:@"description" ascending:YES selector:@selector(compare:)];

    if ([value isKindOfClass:[NSDictionary class]]) {
        NSDictionary *dictionary = value;
        // Sort dictionary keys to ensure consistent ordering in query string, which is important when deserializing potentially ambiguous sequences, such as an array of dictionaries
        for (id nestedKey in [dictionary.allKeys sortedArrayUsingDescriptors:@[ sortDescriptor ]]) {
            id nestedValue = dictionary[nestedKey];
            if (nestedValue) {
                [mutableQueryStringComponents addObjectsFromArray:YLReadQueryStringPairsFromKeyAndValue((key ? [NSString stringWithFormat:@"%@[%@]", key, nestedKey] : nestedKey), nestedValue)];
            }
        }
    } else if ([value isKindOfClass:[NSArray class]]) {
        NSArray *array = value;
        for (id nestedValue in array) {
            [mutableQueryStringComponents addObjectsFromArray:YLReadQueryStringPairsFromKeyAndValue([NSString stringWithFormat:@"%@[]", key], nestedValue)];
        }
    } else if ([value isKindOfClass:[NSSet class]]) {
        NSSet *set = value;
        for (id obj in [set sortedArrayUsingDescriptors:@[ sortDescriptor ]]) {
            [mutableQueryStringComponents addObjectsFromArray:YLReadQueryStringPairsFromKeyAndValue(key, obj)];
        }
    } else {
        [mutableQueryStringComponents addObject:[[YLReadQueryStringPair alloc] initWithField:key value:value]];
    }

    return mutableQueryStringComponents;
}


NSArray * YLReadQueryStringPairsFromDictionary(NSDictionary *dictionary) {
    return YLReadQueryStringPairsFromKeyAndValue(nil, dictionary);
}

///‰ªéÂ≠óÂÖ∏‰∏≠Êü•ËØ¢Â≠óÁ¨¶‰∏≤  @{@"name":@"zhangsan",@"age":20} ; name=zhangsan&age=20
NSString * YLReadQueryStringFromParameters(NSDictionary *parameters) {
    NSMutableArray *mutablePairs = [NSMutableArray array];
    for (YLReadQueryStringPair *pair in YLReadQueryStringPairsFromDictionary(parameters)) {
        [mutablePairs addObject:[pair URLEncodedStringValue]];
    }
    return [mutablePairs componentsJoinedByString:@"&"];
}

@interface HTTPRequestSerializer ()
///Êüê‰∏™requestÈúÄË¶ÅËßÇÂØüÁöÑÂ±ûÊÄßÈõÜÂêà
@property (readwrite, nonatomic, strong) NSMutableSet *mutableObservedChangedKeyPaths;

///Â≠òÂÇ®requestÁöÑËØ∑Ê±ÇÂ§¥Âüü
@property (readwrite, nonatomic, strong) NSMutableDictionary *mutableHTTPRequestHeaders;

///Áî®‰∫é‰øÆÊîπÊàñËÄÖËÆæÁΩÆËØ∑Ê±Ç‰ΩìÂüüÁöÑdispatch_queue_t„ÄÇ
@property (readwrite, nonatomic, strong) dispatch_queue_t requestHeaderModificationQueue;
//@property (readwrite, nonatomic, assign) YLReadHTTPRequestQueryStringSerializationStyle queryStringSerializationStyle;
//
/////ÊâãÂä®ÊåáÂÆöparametersÂèÇÊï∞Â∫èÂàóÂåñÁöÑBlock
//@property (readwrite, nonatomic, copy) YLReadQueryStringSerializationBlock queryStringSerialization;
@end


@implementation HTTPRequestSerializer





- (NSMutableURLRequest *)requestWithMethod:(NSString *)method
                                 URLString:(NSString *)URLString
                                parameters:(id)parameters
                                     error:(NSError *__autoreleasing *)error{
    NSParameterAssert(method);//Êñ≠Ë®ÄÔºådebugÊ®°Âºè‰∏ãÔºåÂ¶ÇÊûúÁº∫Â∞ëÊîπÂèÇÊï∞Ôºåcrash
    NSParameterAssert(URLString);

    NSURL *url = [NSURL URLWithString:URLString];

    NSParameterAssert(url);

    NSMutableURLRequest *mutableRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    mutableRequest.HTTPMethod = method;//ËØ∑Ê±ÇÊñπÊ≥ï GET POST

    //Â∞ÜrequestÁöÑÂêÑÁßçÂ±ûÊÄßÂæ™ÁéØÈÅçÂéÜ
    for (NSString *keyPath in YLReadHTTPRequestSerializerObservedKeyPaths()) {
        //Â¶ÇÊûúËá™Â∑±ËßÇÂØüÂà∞ÁöÑÂèëÁîüÂèòÂåñÁöÑÂ±ûÊÄßÔºåÂú®Ëøô‰∫õÊñπÊ≥ïÈáå
        if ([self.mutableObservedChangedKeyPaths containsObject:keyPath]) {
            //ÊääÁªôËá™Â∑±ËÆæÁΩÆÁöÑÂ±ûÊÄßÁªôrequestËÆæÁΩÆ
            [mutableRequest setValue:[self valueForKeyPath:keyPath] forKey:keyPath];
            /*
                keyPath : allowsCellularAccess  value : 1(ÊòØÂê¶ÂÖÅËÆ∏ËúÇÁ™ùÁΩë)
                keyPath : cachePolicy           value : 0(ÁºìÂ≠òÁ≠ñÁï•ÔºåÂü∫Á°ÄÁºìÂ≠ò)
                keyPath : timeoutInterval       value : 15

                 keyPath : allowsCellularAccess  value : 0
                 keyPath : cachePolicy           value : 2
                (ÁºìÂ≠òÁ≠ñÁï•ÔºåÈ¶ñÂÖà‰ΩøÁî®ÁºìÂ≠òÔºåÂ¶ÇÊûúÊ≤°ÊúâÊú¨Âú∞ÁºìÂ≠òÔºåÊâç‰ªéÂéüÂú∞ÂùÄ‰∏ãËΩΩ)
                 keyPath : timeoutInterval       value : 15
             */
        }
    }
    //Â∞Ü‰º†ÂÖ•ÁöÑparametersËøõË°åÁºñÁ†ÅÔºåÂπ∂Ê∑ªÂä†Âà∞request‰∏≠
    mutableRequest = [[self requestBySerializingRequest:mutableRequest withParameters:parameters error:error] mutableCopy];

    return mutableRequest;
}

#pragma mark - HTTPRequestSerialization


/* ÂçèËÆÆÊñπÊ≥ï
 Ëøô‰∏™ÊñπÊ≥ïÂÅö‰∫Ü3‰ª∂‰∫ãÔºö
 1.‰ªéself.HTTPRequestHeaders‰∏≠ÊãøÂà∞ËÆæÁΩÆÁöÑÂèÇÊï∞ÔºåËµãÂÄºË¶ÅËØ∑Ê±ÇÁöÑrequestÈáåÂéª
 2.ÊääËØ∑Ê±ÇÁΩëÁªúÁöÑÂèÇÊï∞Ôºå‰ªéarray dic setËøô‰∫õÂÆπÂô®Á±ªÂûãËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤ÔºåÂÖ∑‰ΩìËΩ¨Á†ÅÊñπÂºèÔºåÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®Ëá™ÂÆö‰πâÁöÑÊñπÂºèÔºå‰πüÂèØ‰ª•Áî®YLReadÈªòËÆ§ÁöÑËΩ¨Á†ÅÊñπÂºè
 3.Á¥ßÊé•ÁùÄËøô‰∏™ÊñπÊ≥ïËøòÊ†πÊçÆËØ•request‰∏≠ËØ∑Ê±ÇÁ±ªÂûãÔºåÊù•Âà§Êñ≠ÂèÇÊï∞Â≠óÁ¨¶‰∏≤Â∫îËØ•Â¶Ç‰ΩïËÆæÁΩÆÂà∞request‰∏≠Âéª„ÄÇÂ¶ÇÊûúÊòØGET„ÄÅHEAD„ÄÅDELETEÔºåÂàôÊääÂèÇÊï∞queyÊòØÊãºÊé•Âà∞urlÂêéÈù¢ÁöÑ„ÄÇËÄåPOST„ÄÅPUTÊòØÊääqueryÊãºÊé•Âà∞http body‰∏≠ÁöÑ:
 */
- (NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request
                               withParameters:(id)parameters
                                        error:(NSError *__autoreleasing *)error{
    NSParameterAssert(request);

    NSMutableURLRequest *mutableRequest = [request mutableCopy];
    //‰ªéËá™Â∑±ÁöÑheadÈáåÂéªÈÅçÂéÜÔºåÂ¶ÇÊûúÊúâÂÄºÂàôËÆæÁΩÆÁªôrequestÁöÑhead
    [self.HTTPRequestHeaders enumerateKeysAndObjectsUsingBlock:^(id field, id value, BOOL * __unused stop) {
        if (![request valueForHTTPHeaderField:field]) {
            [mutableRequest setValue:value forHTTPHeaderField:field];
            /*
             NSLog(@"field : %@ \n value : %@",field,value);
             field : Accept-Language   value : zh-Hans-CN;q=1
             field : Authorization     value : Basic MTM4MDAwMDAwMDA6YTEyMzQ1Njc=
             field : User-Agent  value : objective_c_language/1.0 (iPhone; iOS 10.3.3; Scale/2.00)
             */
        }
    }];

    NSString *query = YLReadQueryStringFromParameters(parameters);;//Êù•ÊääÂêÑÁßçÁ±ªÂûãÁöÑÂèÇÊï∞Ôºåarray dic setËΩ¨ÂåñÊàêÂ≠óÁ¨¶‰∏≤ÔºåÁªôrequest

    //ÊúÄÂêéÂà§Êñ≠ËØ•request‰∏≠ÊòØÂê¶ÂåÖÂê´‰∫ÜGET„ÄÅHEAD„ÄÅDELETEÔºàÈÉΩÂåÖÂê´Âú®HTTPMethodsEncodingParametersInURIÔºâ„ÄÇÂõ†‰∏∫ËøôÂá†‰∏™methodÁöÑqueyÊòØÊãºÊé•Âà∞urlÂêéÈù¢ÁöÑ„ÄÇËÄåPOST„ÄÅPUTÊòØÊääqueryÊãºÊé•Âà∞http body‰∏≠ÁöÑ„ÄÇ

    if ([self.HTTPMethodsEncodingParametersInURI containsObject:[[request HTTPMethod] uppercaseString]]) {
        if (query && query.length > 0) {
            mutableRequest.URL = [NSURL URLWithString:[[mutableRequest.URL absoluteString] stringByAppendingFormat:mutableRequest.URL.query ? @"&%@" : @"?%@", query]];
        }
    } else {
        
         //post putËØ∑Ê±Ç
        // #2864: an empty string is a valid x-www-form-urlencoded payload
        if (!query) {
            query = @"";
        }
        if (![mutableRequest valueForHTTPHeaderField:@"Content-Type"]) {
            [mutableRequest setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
        }
        
        //ËÆæÁΩÆËØ∑Ê±Ç‰Ωì
        [mutableRequest setHTTPBody:[query dataUsingEncoding:self.stringEncoding]];
    }

    //Ëá≥Ê≠§ÔºåÊàë‰ª¨ÁîüÊàê‰∫Ü‰∏Ä‰∏™request
    return mutableRequest;
}



// ËøîÂõûËØ∑Ê±ÇÂ§¥ÂüükeyÂíåvaue
- (NSDictionary *)HTTPRequestHeaders {
    NSDictionary __block *value;
    dispatch_sync(self.requestHeaderModificationQueue, ^{
        value = [NSDictionary dictionaryWithDictionary:self.mutableHTTPRequestHeaders];
    });
    return value;
}

@end
